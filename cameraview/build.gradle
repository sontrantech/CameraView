apply plugin: 'com.android.library'

// Required by bintray
version = '1.6.2'
group = 'com.sontrantech'

//region android dependencies

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    // buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName project.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    repositories {
        maven {
            url 'https://maven.google.com/'
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/options'
        main.java.srcDirs += 'src/main/views'
        main.java.srcDirs += 'src/main/utils'
    }
}

dependencies {
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:2.28.2'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    api "com.android.support:exifinterface:$supportLibVersion"
    api "android.arch.lifecycle:common:$lifecycleVersion"
    implementation "com.android.support:support-annotations:$supportLibVersion"
}

//endregion

//region bintray
ext {
    bintrayRepo = 'maven'
    bintrayName = 'CameraView'

    publishedGroupId = group
    libraryName = 'CameraView'
    artifact = 'cameraview'

    libraryDescription = 'CameraView is a well documented, high-level library that makes capturing pictures and videos easy, addressing most of the common issues and needs, and still leaving you with flexibility where needed.'

    siteUrl = 'https://github.com/sontrantech/CameraView'
    gitUrl = 'https://github.com/sontrantech/CameraView.git'

    libraryVersion = version

    developerId = 'sontrantech'
    developerName = 'Son Tran'
    developerEmail = 'sontran.tech@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}
apply from: 'install.gradle'
apply from: 'bintray.gradle'

//endregion

//region code coverage

// 1. running androidTests with connectedCheck will generate an .ec file
// in build/outputs/code-coverage/connected, plus the XML result in
// in build/reports/coverage/debug/report.xml .

// 2. running unit tests with testDebugUnitTest will just generate the .exec file.
// The JacocoReport task from the jacoco plugin can create the XML report out of it.

// to have a unified report, we just pass both the .exec and the .ec file
// to the jacoco task, so we get a unified XML report with total coverage.
// Reference: https://medium.com/@rafael_toledo/setting-up-an-unified-coverage-report-in-android-with-jacoco-robolectric-and-espresso-ffe239aaf3fa

apply plugin: 'jacoco'

def reportsDirectory = "$buildDir/reports/"
jacoco {
    toolVersion = "0.8.1"
    reportsDir = file(reportsDirectory)
}

task mergedCoverageReport(type: JacocoReport) {
    dependsOn "testDebugUnitTest"
    dependsOn "connectedCheck"

    def testData = "jacoco/testDebugUnitTest.exec"
    def androidTestData = "outputs/code-coverage/connected/*coverage.ec"
    executionData = fileTree(dir: "$buildDir", includes: [testData, androidTestData])

    // Sources.
    sourceDirectories = android.sourceSets.main.java.sourceFiles
    // Add BuildConfig and R.
    additionalSourceDirs = files([
            "$buildDir/generated/source/buildConfig/debug",
            "$buildDir/generated/source/r/debug"
    ])

    // Classes.
    def debugDir = "$buildDir/intermediates/classes/debug"
    def filter = ['**/R.class', '**/R$*.class', '**/*$ViewInjector*.*',
                  '**/BuildConfig.*', '**/Manifest*.*']
    classDirectories = fileTree(dir: debugDir, excludes: filter);

    reports.xml.enabled = true
    reports.html.enabled = true
//    reports.xml.destination = "$reportsDirectory/mergedCoverageReport/report.xml"
}

//endregion

// export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home
// To deploy ./gradlew bintrayUpload

